{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Include cookies for CSRF tokens\n});\n\n// CSRF token management\nlet csrfToken = null;\nconst getCSRFToken = async () => {\n  if (!csrfToken) {\n    try {\n      const response = await api.get('/auth/profile');\n      if (response.data && response.data.user && response.data.user.csrf_token) {\n        csrfToken = response.data.user.csrf_token;\n      }\n    } catch (error) {\n      // CSRF token not available (user not logged in)\n      console.log('CSRF token not available');\n    }\n  }\n  return csrfToken;\n};\n\n// Request interceptor for logging and CSRF token\napi.interceptors.request.use(async config => {\n  console.log(`Making ${config.method.toUpperCase()} request to ${config.url}`);\n\n  // Add CSRF token for non-GET requests\n  if (config.method !== 'get') {\n    const token = await getCSRFToken();\n    if (token) {\n      config.headers['X-CSRF-Token'] = token;\n    }\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Clear CSRF token on auth errors to force refresh\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403 || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    csrfToken = null;\n  }\n  return Promise.reject(error);\n});\n\n// Export function to clear tokens (for logout)\nexport const clearTokens = () => {\n  csrfToken = null;\n};\n\n// Chores API\nexport const choreAPI = {\n  getAll: () => api.get('/chores'),\n  create: chore => api.post('/chores', chore),\n  update: (id, chore) => api.put(`/chores/${id}`, chore),\n  delete: id => api.delete(`/chores/${id}`)\n};\n\n// Sub-chores API\nexport const subChoreAPI = {\n  getAll: choreId => api.get(`/chores/${choreId}/sub-chores`),\n  create: (choreId, subChore) => api.post(`/chores/${choreId}/sub-chores`, subChore),\n  update: (choreId, subChoreId, subChore) => api.put(`/chores/${choreId}/sub-chores/${subChoreId}`, subChore),\n  delete: (choreId, subChoreId) => api.delete(`/chores/${choreId}/sub-chores/${subChoreId}`),\n  toggle: (choreId, subChoreId, assignmentIndex = null) => api.post(`/chores/${choreId}/sub-chores/${subChoreId}/toggle`, {\n    assignment_index: assignmentIndex\n  }),\n  getProgress: (choreId, assignmentIndex = null) => api.get(`/chores/${choreId}/progress${assignmentIndex !== null ? `?assignment_index=${assignmentIndex}` : ''}`)\n};\n\n// Shopping list API\nexport const shoppingListAPI = {\n  getAll: (status = null) => api.get(`/shopping-list${status ? `?status=${status}` : ''}`),\n  create: item => api.post('/shopping-list', item),\n  update: (id, item) => api.put(`/shopping-list/${id}`, item),\n  delete: id => api.delete(`/shopping-list/${id}`),\n  markPurchased: (id, purchaseData) => api.post(`/shopping-list/${id}/purchase`, purchaseData),\n  getHistory: (days = 30) => api.get(`/shopping-list/history?days=${days}`),\n  getMetadata: () => api.get('/shopping-list/metadata'),\n  clearAllHistory: () => api.post('/shopping-list/clear-all-history'),\n  clearHistoryFromDate: fromDate => api.post('/shopping-list/clear-history-from-date', {\n    from_date: fromDate\n  })\n};\n\n// Request API\nexport const requestAPI = {\n  getAll: (status = null) => api.get(`/requests${status ? `?status=${status}` : ''}`),\n  create: request => api.post('/requests', request),\n  update: (id, request) => api.put(`/requests/${id}`, request),\n  delete: id => api.delete(`/requests/${id}`),\n  approve: (id, approvalData) => api.post(`/requests/${id}/approve`, approvalData),\n  getPendingForUser: userId => api.get(`/requests/pending/${userId}`),\n  getMetadata: () => api.get('/requests/metadata')\n};\n\n// Roommates API\nexport const roommateAPI = {\n  getAll: () => api.get('/roommates'),\n  create: roommate => api.post('/roommates', roommate),\n  update: (id, roommate) => api.put(`/roommates/${id}`, roommate),\n  delete: id => api.delete(`/roommates/${id}`)\n};\n\n// Assignments API\nexport const assignmentAPI = {\n  assignChores: () => api.post('/assign-chores'),\n  getCurrent: () => api.get('/current-assignments'),\n  resetCycle: () => api.post('/reset-cycle')\n};\n\n// Laundry scheduling API\nexport const laundryAPI = {\n  getAll: (params = {}) => {\n    const queryParams = new URLSearchParams();\n    if (params.date) queryParams.append('date', params.date);\n    if (params.roommate_id) queryParams.append('roommate_id', params.roommate_id);\n    if (params.status) queryParams.append('status', params.status);\n    const queryString = queryParams.toString();\n    return api.get(`/laundry-slots${queryString ? `?${queryString}` : ''}`);\n  },\n  create: slot => api.post('/laundry-slots', slot),\n  update: (id, slot) => api.put(`/laundry-slots/${id}`, slot),\n  delete: id => api.delete(`/laundry-slots/${id}`),\n  complete: (id, completionData = {}) => api.post(`/laundry-slots/${id}/complete`, completionData),\n  checkConflicts: conflictData => api.post('/laundry-slots/check-conflicts', conflictData),\n  getMetadata: () => api.get('/laundry-slots/metadata')\n};\n\n// Calendar integration API\nexport const calendarAPI = {\n  getStatus: () => api.get('/calendar/status'),\n  setupCredentials: credentials => api.post('/calendar/setup-credentials', {\n    credentials\n  }),\n  getOAuthUrl: () => api.get('/calendar/oauth-url'),\n  getCalendarList: () => api.get('/calendar/calendars'),\n  getConfig: () => api.get('/calendar/config'),\n  saveConfig: config => api.post('/calendar/config', config),\n  createEvent: eventData => api.post('/calendar/create-event', eventData),\n  deleteEvent: (calendarId, eventId) => api.delete('/calendar/delete-event', {\n    data: {\n      calendar_id: calendarId,\n      event_id: eventId\n    }\n  })\n};\n\n// Authentication API\nexport const authAPI = {\n  getStatus: () => api.get('/auth/status'),\n  initiateGoogleLogin: redirectUri => api.post('/auth/google-login', {\n    redirect_uri: redirectUri\n  }),\n  getProfile: () => api.get('/auth/profile'),\n  refreshSession: () => api.post('/auth/refresh'),\n  linkRoommate: roommateId => api.post('/auth/link-roommate', {\n    roommate_id: roommateId\n  }),\n  unlinkRoommate: () => api.post('/auth/unlink-roommate'),\n  logout: () => api.post('/auth/logout'),\n  revokeAccess: () => api.post('/auth/revoke'),\n  setupCredentials: credentials => api.post('/auth/setup-credentials', {\n    credentials\n  })\n};\n\n// User Calendar API\nexport const userCalendarAPI = {\n  getConfig: () => api.get('/user-calendar/config'),\n  saveConfig: config => api.post('/user-calendar/config', config),\n  getCalendars: () => api.get('/user-calendar/calendars'),\n  syncChores: () => api.post('/user-calendar/sync-chores'),\n  getSyncStatus: () => api.get('/user-calendar/sync-status')\n};\n\n// Application state API\nexport const stateAPI = {\n  get: () => api.get('/state'),\n  health: () => api.get('/health')\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","withCredentials","csrfToken","getCSRFToken","response","get","data","user","csrf_token","error","console","log","interceptors","request","use","config","method","toUpperCase","url","token","Promise","reject","_error$response","_error$response2","_error$response3","message","status","clearTokens","choreAPI","getAll","chore","post","update","id","put","delete","subChoreAPI","choreId","subChore","subChoreId","toggle","assignmentIndex","assignment_index","getProgress","shoppingListAPI","item","markPurchased","purchaseData","getHistory","days","getMetadata","clearAllHistory","clearHistoryFromDate","fromDate","from_date","requestAPI","approve","approvalData","getPendingForUser","userId","roommateAPI","roommate","assignmentAPI","assignChores","getCurrent","resetCycle","laundryAPI","params","queryParams","URLSearchParams","date","append","roommate_id","queryString","toString","slot","complete","completionData","checkConflicts","conflictData","calendarAPI","getStatus","setupCredentials","credentials","getOAuthUrl","getCalendarList","getConfig","saveConfig","createEvent","eventData","deleteEvent","calendarId","eventId","calendar_id","event_id","authAPI","initiateGoogleLogin","redirectUri","redirect_uri","getProfile","refreshSession","linkRoommate","roommateId","unlinkRoommate","logout","revokeAccess","userCalendarAPI","getCalendars","syncChores","getSyncStatus","stateAPI","health"],"sources":["/Users/angel/Desktop/vscode python/vscode python/MISC/Chores/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Include cookies for CSRF tokens\n});\n\n// CSRF token management\nlet csrfToken = null;\n\nconst getCSRFToken = async () => {\n  if (!csrfToken) {\n    try {\n      const response = await api.get('/auth/profile');\n      if (response.data && response.data.user && response.data.user.csrf_token) {\n        csrfToken = response.data.user.csrf_token;\n      }\n    } catch (error) {\n      // CSRF token not available (user not logged in)\n      console.log('CSRF token not available');\n    }\n  }\n  return csrfToken;\n};\n\n// Request interceptor for logging and CSRF token\napi.interceptors.request.use(\n  async (config) => {\n    console.log(`Making ${config.method.toUpperCase()} request to ${config.url}`);\n    \n    // Add CSRF token for non-GET requests\n    if (config.method !== 'get') {\n      const token = await getCSRFToken();\n      if (token) {\n        config.headers['X-CSRF-Token'] = token;\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    \n    // Clear CSRF token on auth errors to force refresh\n    if (error.response?.status === 403 || error.response?.status === 401) {\n      csrfToken = null;\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Export function to clear tokens (for logout)\nexport const clearTokens = () => {\n  csrfToken = null;\n};\n\n// Chores API\nexport const choreAPI = {\n  getAll: () => api.get('/chores'),\n  create: (chore) => api.post('/chores', chore),\n  update: (id, chore) => api.put(`/chores/${id}`, chore),\n  delete: (id) => api.delete(`/chores/${id}`),\n};\n\n// Sub-chores API\nexport const subChoreAPI = {\n  getAll: (choreId) => api.get(`/chores/${choreId}/sub-chores`),\n  create: (choreId, subChore) => api.post(`/chores/${choreId}/sub-chores`, subChore),\n  update: (choreId, subChoreId, subChore) => api.put(`/chores/${choreId}/sub-chores/${subChoreId}`, subChore),\n  delete: (choreId, subChoreId) => api.delete(`/chores/${choreId}/sub-chores/${subChoreId}`),\n  toggle: (choreId, subChoreId, assignmentIndex = null) => \n    api.post(`/chores/${choreId}/sub-chores/${subChoreId}/toggle`, { assignment_index: assignmentIndex }),\n  getProgress: (choreId, assignmentIndex = null) => \n    api.get(`/chores/${choreId}/progress${assignmentIndex !== null ? `?assignment_index=${assignmentIndex}` : ''}`),\n};\n\n// Shopping list API\nexport const shoppingListAPI = {\n  getAll: (status = null) => api.get(`/shopping-list${status ? `?status=${status}` : ''}`),\n  create: (item) => api.post('/shopping-list', item),\n  update: (id, item) => api.put(`/shopping-list/${id}`, item),\n  delete: (id) => api.delete(`/shopping-list/${id}`),\n  markPurchased: (id, purchaseData) => api.post(`/shopping-list/${id}/purchase`, purchaseData),\n  getHistory: (days = 30) => api.get(`/shopping-list/history?days=${days}`),\n  getMetadata: () => api.get('/shopping-list/metadata'),\n  clearAllHistory: () => api.post('/shopping-list/clear-all-history'),\n  clearHistoryFromDate: (fromDate) => api.post('/shopping-list/clear-history-from-date', { from_date: fromDate }),\n};\n\n// Request API\nexport const requestAPI = {\n  getAll: (status = null) => api.get(`/requests${status ? `?status=${status}` : ''}`),\n  create: (request) => api.post('/requests', request),\n  update: (id, request) => api.put(`/requests/${id}`, request),\n  delete: (id) => api.delete(`/requests/${id}`),\n  approve: (id, approvalData) => api.post(`/requests/${id}/approve`, approvalData),\n  getPendingForUser: (userId) => api.get(`/requests/pending/${userId}`),\n  getMetadata: () => api.get('/requests/metadata'),\n};\n\n// Roommates API\nexport const roommateAPI = {\n  getAll: () => api.get('/roommates'),\n  create: (roommate) => api.post('/roommates', roommate),\n  update: (id, roommate) => api.put(`/roommates/${id}`, roommate),\n  delete: (id) => api.delete(`/roommates/${id}`),\n};\n\n// Assignments API\nexport const assignmentAPI = {\n  assignChores: () => api.post('/assign-chores'),\n  getCurrent: () => api.get('/current-assignments'),\n  resetCycle: () => api.post('/reset-cycle'),\n};\n\n// Laundry scheduling API\nexport const laundryAPI = {\n  getAll: (params = {}) => {\n    const queryParams = new URLSearchParams();\n    if (params.date) queryParams.append('date', params.date);\n    if (params.roommate_id) queryParams.append('roommate_id', params.roommate_id);\n    if (params.status) queryParams.append('status', params.status);\n    \n    const queryString = queryParams.toString();\n    return api.get(`/laundry-slots${queryString ? `?${queryString}` : ''}`);\n  },\n  create: (slot) => api.post('/laundry-slots', slot),\n  update: (id, slot) => api.put(`/laundry-slots/${id}`, slot),\n  delete: (id) => api.delete(`/laundry-slots/${id}`),\n  complete: (id, completionData = {}) => api.post(`/laundry-slots/${id}/complete`, completionData),\n  checkConflicts: (conflictData) => api.post('/laundry-slots/check-conflicts', conflictData),\n  getMetadata: () => api.get('/laundry-slots/metadata'),\n};\n\n// Calendar integration API\nexport const calendarAPI = {\n  getStatus: () => api.get('/calendar/status'),\n  setupCredentials: (credentials) => api.post('/calendar/setup-credentials', { credentials }),\n  getOAuthUrl: () => api.get('/calendar/oauth-url'),\n  getCalendarList: () => api.get('/calendar/calendars'),\n  getConfig: () => api.get('/calendar/config'),\n  saveConfig: (config) => api.post('/calendar/config', config),\n  createEvent: (eventData) => api.post('/calendar/create-event', eventData),\n  deleteEvent: (calendarId, eventId) => api.delete('/calendar/delete-event', { data: { calendar_id: calendarId, event_id: eventId } }),\n};\n\n// Authentication API\nexport const authAPI = {\n  getStatus: () => api.get('/auth/status'),\n  initiateGoogleLogin: (redirectUri) => api.post('/auth/google-login', { redirect_uri: redirectUri }),\n  getProfile: () => api.get('/auth/profile'),\n  refreshSession: () => api.post('/auth/refresh'),\n  linkRoommate: (roommateId) => api.post('/auth/link-roommate', { roommate_id: roommateId }),\n  unlinkRoommate: () => api.post('/auth/unlink-roommate'),\n  logout: () => api.post('/auth/logout'),\n  revokeAccess: () => api.post('/auth/revoke'),\n  setupCredentials: (credentials) => api.post('/auth/setup-credentials', { credentials }),\n};\n\n// User Calendar API\nexport const userCalendarAPI = {\n  getConfig: () => api.get('/user-calendar/config'),\n  saveConfig: (config) => api.post('/user-calendar/config', config),\n  getCalendars: () => api.get('/user-calendar/calendars'),\n  syncChores: () => api.post('/user-calendar/sync-chores'),\n  getSyncStatus: () => api.get('/user-calendar/sync-status'),\n};\n\n// Application state API\nexport const stateAPI = {\n  get: () => api.get('/state'),\n  health: () => api.get('/health'),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}